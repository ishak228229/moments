import telebot
import datetime
import os
import json
from dotenv import load_dotenv
from functions import typing, start_buttons

load_dotenv()

TOKEN = os.getenv('TOKEN')

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message) -> None:
    cht = message.chat.id
    username = message.from_user.username

    if username == None:
        typing(bot, cht, '–°—Ö–æ–∂–µ, —É —Ç–µ–±–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–µ <b>–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n–ô–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º')
    else:
        with open('users.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        if username not in data:
            time_now = datetime.datetime.now()
            date = time_now.strftime('%d.%m.%Y, %H:%M:%S')

            data[username] = {
                'join_date': date
            }
            with open('users.json', 'w', encoding='utf-8') as f2:
                json.dump(data, f2, ensure_ascii=False)

            typing(bot, cht, '–ü—Ä–∏–≤—ñ—Ç üëã\n–ì–∞–π–¥–∞ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å —Ç–∞ –¥—ñ–ª–∏—Ç—Å—å –Ω–∞–π—è—Å–∫—Ä–∞–≤—ñ—à–∏–º–∏ –º–æ–º–µ—Ç–∞–º–∏ –∑ –¥—Ä—É–∑—è–º–∏ üì∏')
            typing(bot, cht, '–î–∞–≤–∞–π –∑–∞–ø–æ–≤–Ω–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å!\n–ù–∞–¥—ñ—à–ª–∏ –≥–∞—Ä–Ω–µ–Ω—å–∫—É –∞–≤–∞—Ç–∞—Ä–∫—É ;)', next_func=get_avatar)
        else:
            typing(bot, cht, '–ü—Ä–∏–≤—ñ—Ç üëã\n–ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ?)', markup='start')

def get_avatar(message):
    cht = message.chat.id
    username = message.from_user.username

    try:
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        downloaded_file = bot.download_file(file_path)

        save_path = os.path.join('images', f'{message.from_user.username}.jpg')
        with open(save_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        with open('users.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        data[username]['image_path'] = f'images/{message.from_user.username}.jpg'
        
        with open('users.json', 'w', encoding='utf-8') as f2:
            json.dump(data, f2, ensure_ascii=False)
        
        typing(bot, cht, '–õ—é–∫—Å üòª\n–†—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ!')
        typing(bot, cht, '–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ —è–∫–∏–π-–Ω–µ–±—É–¥—å –æ–ø–∏—Å üí¨\n–†–æ–∑–∫–∞–∂–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ö—Ç–æ —Ç–∏/—â–æ –±—É–¥–µ—à –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏...', get_description)
    except Exception as ex:
        typing(bot, cht, '–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
        typing(bot, cht, f'–ü–æ–º–∏–ª–∫–∞: {ex}', get_avatar)

def get_description(message):
    cht = message.chat.id
    username = message.from_user.username
    description = message.text

    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        data[username]['description'] = f'{description}'
        
        with open('users.json', 'w', encoding='utf-8') as f2:
            json.dump(data, f2, ensure_ascii=False)
        
        typing(bot, cht, '–°—É–ø–µ—Ä üëç\n–£—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–µ—Ä—à–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó üòâ', markup='start')
    except Exception as ex:
        typing(bot, cht, '–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
        typing(bot, cht, f'–ü–æ–º–∏–ª–∫–∞: {ex}', get_description)

@bot.message_handler(content_types=['text'])
def text(message: telebot.types.Message) -> None:
    cht = message.chat.id
    username = message.from_user.username

    if message.text == '–ü—Ä–æ—Ñ—ñ–ª—å üë§':
        with open(f'users.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            bot.send_photo(cht, open(os.path.join(data[username]['image_path']), 'rb'),
                           caption=f'<blockquote><b>{data[username]['description']}</b></blockquote>\n' +
                           f'–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è: <b>{data[username]['join_date']}</b>',
                           parse_mode='HTML')

bot.polling()